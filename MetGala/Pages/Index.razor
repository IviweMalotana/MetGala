@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using System.Collections.Generic
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@using System.IO 

<style>

    .wrapper {
        height: 50vh;
        width: 100%;
        background-color: white;
    }

    .nav {
        height: 20vh;
        background-color: black;
        box-shadow: rgba(0, 0, 0, 0.2) 0px 12px 28px 0px, rgba(0, 0, 0, 0.1) 0px 2px 4px 0px, rgba(255, 255, 255, 0.05) 0px 0px 0px 1px inset;
        width: 100%;
        text-align: center;
        justify-content: center;
        color: antiquewhite;
        font-family: Zapfino;
        margin-bottom: 10vh;
    }

    .form-body {
        height: 50vh;
        width: 30%;
        border-radius: 10px;
        margin: auto;
        background-color: black;
        align-content: center;
        justify-content: center;
        box-shadow: rgba(0, 0, 0, 0.2) 0px 12px 28px 0px, rgba(0, 0, 0, 0.1) 0px 2px 4px 0px, rgba(255, 255, 255, 0.05) 0px 0px 0px 1px inset;
    }

    .form-div {
        height: 95%;
        margin-bottom: 5%;
        width: 100%;
    }

    .heading {
        height: 5%;
        margin-bottom: 5%;
    }


    .div-buttons {
        height: 5%;
        margin-bottom: 10%;
        display: flex;
        align-content: center;
        text-align: center;
        margin-left: 20%;
        margin-right: 20%;
        width: 60%;
        justify-content: center;
    }


    .form-group-others {
        width: 80%;
        padding-top: 10%;
        margin: auto;
    }

    .form-group-text-area {
        width: 70%;
        margin: auto;
        height: auto;
        padding-top: 5%;
    }

    .form-control-style {
        border: 2px antiquewhite solid;
        color: black;
        font-family: Merienda;
    }

    .form-control-text-area {
        border: 2px darkgrey solid;
        width: 100%;
    }

    .buttondivs {
        height: 80%;
        width: 50%;
        margin-bottom: 20%;
        border: none;
        color: white;
    }

        .buttondivs:hover {
            text-decoration: none;
        }

    .add-button-div {
        border: none;
        display: flex;
        justify-content: center;
        align-items: center;
        height: auto;
    }

    h1 {
        font-size: 100px;
        margin-top: 20px;
    }

    h2 {
        text-decoration: none;
        font-size: 20px;
    }

    h3 {
        font-size: 20px;
    }

    .top-div {
        width: 80%;
        display: flex;
        height: 30%;
        margin: auto;
    }

    .mybutton {
        border: none;
        width: 100%;
        height: 100%;
        color: antiquewhite;
        background-color: black;
    }

    .powerbi {
        height: 30vh;
        width: 100%;
        background-color: white;
    }

    .top {
        width: 900px;
        height: 10vh;
        background-color: black;
    }
   
    .bottom {
        width: 900px;
        height: 40vh;
        background-color: blue;
    }
    .dropzone{
        width: 900px;
        height: 10vh;
        background-color: black;
    }
    .dropzone::-webkit-file-upload-button {
        visibility: hidden;
    }
    .dropzone:hover::before {
        border-color: grey;
    }

    .dropzone:active::before {
        background: white;
    }
    .dropzone::before {
        content: 'Select some files';
        display: inline-block;
        background: linear-gradient(top, #f9f9f9, #e3e3e3);
        border: 1px solid #999;
        border-radius: 3px;
        padding: 5px 8px;
        outline: none;
        white-space: nowrap;
        -webkit-user-select: none;
        cursor: pointer;
        text-shadow: 1px 1px #fff;
        font-weight: 700;
        font-size: 10pt;
    }
</style>
<div class="wrapper">
    <div class="top"  @ref="dropzone">
        <InputFile OnChange="@OnFileChange" class="dropzone" @ref="file"/>
    </div>
    <div class="bottom">
        @thisFile
    </div>
</div>
<div class="wrapper">
    <div class="nav">
        <h1>Met Gala Registration</h1>
    </div>
    <div class="form-body">

        <div class="form-group-others">
            <input type="text" class="form-control form-control-style" placeholder="Name" @bind="met.Platform"/>
        </div>


        <div class="form-group-others">
            <select class="custom-select right-input " id="inputGroupSelect01" @onchange="OnDesignerChanged">
                <option selected>Select Platform</option>
                <option value="Indeed">Indeed</option>
                <option value="Twitter">Twitter</option>
                <option value="LinkedIn">LinkedIn</option>
            </select>
        </div>
        <div class="form-group-others">
            <button type="button" @onclick="Done" class="mybutton">Done</button>
        </div>
    </div>
    <div class="power-bi">

    </div>

</div>

@code
{
    public class Met
    {
        public string Platform { get; set; }
    }

    Met met = new Met();

    [Parameter]
    public EventCallback<string> ValueChanged
    {
        get;
        set;
    }

    private bool fileIsHidden = true;

    private Task OnDesignerChanged(ChangeEventArgs e)
    {
        met.Platform = e.Value.ToString();
        return ValueChanged.InvokeAsync(met.Platform);
    }



    private async Task Done()
    {

        await HttpClient.PostAsJsonAsync("", met);
    }

    ElementReference dropzone;
    InputFile file;
    private string thisFile;

    IJSObjectReference module, dropZone;

    public class FileModel
    {
        public string FileName { get; set; }
    }

    FileModel newFile = new FileModel();

    [Parameter]
    public EventCallback<string> FileChanged
    {
        get;
        set;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./DragAndDrop.js");
            dropZone = await module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", dropzone, file);
        }
        catch
        {
            
        }
    }

    // Called when a new file is uploaded
    public Task OnFileChange(InputFileChangeEventArgs e)
    {
        thisFile = e.File.Name.ToString();
        return FileChanged.InvokeAsync(newFile.FileName);
    }

    public async ValueTask DisposeAsync()
    {
        if (dropZone!= null)
        {
            await dropZone.InvokeVoidAsync("dispose");
            await dropZone.DisposeAsync();
        }

        if (module != null)
        {
            await module.DisposeAsync();
        }
    }
}